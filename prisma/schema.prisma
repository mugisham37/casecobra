// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  ADMIN
  CUSTOMER
  VENDOR
  MODERATOR
}

enum AddressType {
  HOME
  WORK
  BILLING
  SHIPPING
  OTHER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum VendorStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum PaymentMethod {
  BANK_TRANSFER
  PAYPAL
  STRIPE
  OTHER
}

enum ABTestStatus {
  DRAFT
  RUNNING
  PAUSED
  COMPLETED
}

enum ABTestType {
  PRODUCT
  CATEGORY
  CHECKOUT
  HOMEPAGE
  OTHER
}

enum RedemptionStatus {
  PENDING
  APPROVED
  REJECTED
  USED
  EXPIRED
}

enum RewardType {
  DISCOUNT
  FREE_PRODUCT
  FREE_SHIPPING
  GIFT_CARD
  OTHER
}

enum LoyaltyHistoryType {
  ORDER
  REFERRAL
  REDEMPTION
  MANUAL
  EXPIRE
  OTHER
}

enum BusinessType {
  SOLE_PROPRIETORSHIP
  PARTNERSHIP
  CORPORATION
  LLC
  OTHER
}

enum PayoutSchedule {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
}

// Core User Management
model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String
  firstName         String
  lastName          String
  phone             String?
  dateOfBirth       DateTime?
  avatar            String?
  role              UserRole  @default(CUSTOMER)
  isEmailVerified   Boolean   @default(false)
  isPhoneVerified   Boolean   @default(false)
  isActive          Boolean   @default(true)
  lastLoginAt       DateTime?
  emailVerifiedAt   DateTime?
  phoneVerifiedAt   DateTime?
  twoFactorEnabled  Boolean   @default(false)
  twoFactorSecret   String?
  passwordChangedAt DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?

  // Birth date components for better querying
  birthMonth        Int?      @db.SmallInt
  birthDay          Int?      @db.SmallInt
  birthYear         Int?

  // Profile information
  bio               String?
  phoneNumber       String?

  // Country relationship
  countryId         String?

  // JSON fields for flexible data
  preferences       Json      @default("{}")
  metadata          Json      @default("{}")

  // Loyalty points field
  loyaltyPoints     Int       @default(0)

  // Relationships
  country           Country?  @relation(fields: [countryId], references: [id])
  addresses         UserAddress[]
  orders            Order[]
  reviews           Review[]
  cart              Cart?
  loyaltyProgram    LoyaltyProgram?
  loyaltyHistory    LoyaltyHistory[]
  redemptions       Redemption[]
  testAssignments   UserTestAssignment[]
  sessions          Session[]
  emailTokens       EmailVerificationToken[]
  passwordTokens    PasswordResetToken[]
  invitations       UserInvitation[]     @relation("InvitedBy")
  receivedInvites   UserInvitation[]     @relation("InvitedUser")
  activities        UserActivity[]
  loyaltyReferrals  LoyaltyProgram[]     @relation("LoyaltyReferrals")
  loyaltyReferralsGiven    LoyaltyReferral[] @relation("UserReferrals")
  loyaltyReferralReceived  LoyaltyReferral[] @relation("UserReferred")
  loyaltyRedemptions       LoyaltyRedemption[]
  notifications     Notification[]

  @@map("users")
}

model UserAddress {
  id         String      @id @default(cuid())
  userId     String
  type       AddressType @default(OTHER)
  label      String?
  street     String
  city       String
  state      String
  postalCode String
  country    String
  isDefault  Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_addresses")
}

model UserActivity {
  id         String    @id @default(cuid())
  userId     String
  action     String
  resource   String
  resourceId String?
  metadata   Json      @default("{}")
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime  @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activities")
}

// Vendor Management
model Vendor {
  id                   String         @id @default(cuid())
  businessName         String
  slug                 String         @unique
  email                String         @unique
  password             String
  phone                String
  description          String
  logo                 String?
  bannerImage          String?
  website              String?
  socialMedia          Json           @default("{}")
  commissionRate       Decimal        @default(10.00) @db.Decimal(5, 2)
  minimumPayoutAmount  Decimal        @default(100.00) @db.Decimal(10, 2)
  payoutSchedule       PayoutSchedule @default(MONTHLY)
  status               VendorStatus   @default(PENDING)
  verificationNotes    String?
  returnPolicy         String?
  shippingPolicy       String?
  active               Boolean        @default(true)
  passwordChangedAt    DateTime?
  passwordResetToken   String?
  passwordResetExpires DateTime?
  lastLogin            DateTime?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  deletedAt            DateTime?

  // Rating aggregation
  ratingAverage        Decimal        @default(0) @db.Decimal(3, 2)
  ratingCount          Int            @default(0)

  // Metrics
  totalSales           Decimal        @default(0) @db.Decimal(15, 2)
  totalOrders          Int            @default(0)
  totalProducts        Int            @default(0)
  conversionRate       Decimal        @default(0) @db.Decimal(5, 4)
  averageOrderValue    Decimal        @default(0) @db.Decimal(10, 2)

  // Contact person
  contactFirstName     String
  contactLastName      String
  contactEmail         String
  contactPhone         String
  contactPosition      String

  // Tax information
  taxId                String
  businessType         BusinessType
  vatRegistered        Boolean        @default(false)
  vatNumber            String?

  // Relationships
  addresses            VendorAddress[]
  bankAccounts         VendorBankAccount[]
  products             Product[]
  orders               Order[]
  payouts              Payout[]
  verificationDocs     VendorDocument[]
  taxDocuments         VendorTaxDocument[]

  @@map("vendors")
}

model VendorAddress {
  id         String  @id @default(cuid())
  vendorId   String
  street     String
  city       String
  state      String
  postalCode String
  country    String
  isDefault  Boolean @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("vendor_addresses")
}

model VendorBankAccount {
  id            String  @id @default(cuid())
  vendorId      String
  accountName   String
  accountNumber String
  bankName      String
  routingNumber String
  swiftCode     String?
  isDefault     Boolean @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("vendor_bank_accounts")
}

model VendorDocument {
  id        String   @id @default(cuid())
  vendorId  String
  type      String
  url       String
  filename  String
  createdAt DateTime @default(now())

  // Relationships
  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("vendor_documents")
}

model VendorTaxDocument {
  id        String   @id @default(cuid())
  vendorId  String
  url       String
  filename  String
  createdAt DateTime @default(now())

  // Relationships
  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("vendor_tax_documents")
}

// Product Catalog
model Category {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  description String?
  image       String?
  parentId    String?
  isActive    Boolean    @default(true)
  sortOrder   Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // SEO fields
  seoTitle       String?
  seoDescription String?
  seoKeywords    String[]

  // Relationships
  parent            Category?         @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children          Category[]        @relation("CategoryHierarchy")
  products          Product[]
  productCategories ProductCategory[]
  taxRates          TaxRate[]

  @@map("categories")
}

model Product {
  id                  String    @id @default(cuid())
  name                String
  slug                String    @unique
  description         String
  shortDescription    String?
  price               Decimal   @db.Decimal(10, 2)
  compareAtPrice      Decimal?  @db.Decimal(10, 2)
  quantity            Int       @default(0)
  sku                 String?   @unique
  barcode             String?   @unique
  categoryId          String
  vendorId            String
  featured            Boolean   @default(false)
  active              Boolean   @default(true)
  shippingClass       String?
  taxClass            String?
  commission          Decimal?  @db.Decimal(5, 2)
  warrantyInformation String?
  returnPolicy        String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  deletedAt           DateTime?

  // Rating aggregation
  ratingAverage       Decimal   @default(0) @db.Decimal(3, 2)
  ratingCount         Int       @default(0)

  // Dimensions and weight
  length              Decimal?  @db.Decimal(8, 2)
  width               Decimal?  @db.Decimal(8, 2)
  height              Decimal?  @db.Decimal(8, 2)
  dimensionUnit       String?   @default("cm")
  weight              Decimal?  @db.Decimal(8, 2)
  weightUnit          String?   @default("kg")

  // SEO fields
  seoTitle            String?
  seoDescription      String?
  seoKeywords         String[]

  // JSON fields
  attributes          Json      @default("[]")
  tags                String[]

  // Relationships
  category            Category           @relation(fields: [categoryId], references: [id])
  vendor              Vendor             @relation(fields: [vendorId], references: [id])
  images              ProductImage[]
  variants            ProductVariant[]
  reviews             Review[]
  orderItems          OrderItem[]
  cartItems           CartItem[]
  subcategories       ProductCategory[]

  @@map("products")
}

model ProductCategory {
  id         String   @id @default(cuid())
  productId  String
  categoryId String
  createdAt  DateTime @default(now())

  // Relationships
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([productId, categoryId])
  @@map("product_categories")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  altText   String?
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())

  // Relationships
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id             String  @id @default(cuid())
  productId      String
  sku            String  @unique
  price          Decimal @db.Decimal(10, 2)
  compareAtPrice Decimal? @db.Decimal(10, 2)
  quantity       Int     @default(0)
  attributes     Json    @default("[]")
  images         String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  cartItems  CartItem[]

  @@map("product_variants")
}

// Order Management
model Order {
  id                String        @id @default(cuid())
  orderNumber       String        @unique
  userId            String
  vendorId          String
  status            OrderStatus   @default(PENDING)
  paymentStatus     PaymentStatus @default(PENDING)
  subtotal          Decimal       @db.Decimal(10, 2)
  taxAmount         Decimal       @default(0) @db.Decimal(10, 2)
  shippingAmount    Decimal       @default(0) @db.Decimal(10, 2)
  discountAmount    Decimal       @default(0) @db.Decimal(10, 2)
  total             Decimal       @db.Decimal(10, 2)
  currency          String        @default("USD")
  notes             String?
  shippingAddress   Json
  billingAddress    Json
  paymentMethod     String?
  paymentReference  String?
  shippedAt         DateTime?
  deliveredAt       DateTime?
  cancelledAt       DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relationships
  user           User             @relation(fields: [userId], references: [id])
  vendor         Vendor           @relation(fields: [vendorId], references: [id])
  items          OrderItem[]
  payments       Payment[]
  loyaltyHistory LoyaltyHistory[]

  @@map("orders")
}

model OrderItem {
  id               String          @id @default(cuid())
  orderId          String
  productId        String
  productVariantId String?
  quantity         Int
  price            Decimal         @db.Decimal(10, 2)
  total            Decimal         @db.Decimal(10, 2)
  productSnapshot  Json            // Store product details at time of order
  createdAt        DateTime        @default(now())

  // Relationships
  order          Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product        Product         @relation(fields: [productId], references: [id])
  productVariant ProductVariant? @relation(fields: [productVariantId], references: [id])

  @@map("order_items")
}

model Payment {
  id                String        @id @default(cuid())
  orderId           String
  amount            Decimal       @db.Decimal(10, 2)
  currency          String        @default("USD")
  status            PaymentStatus @default(PENDING)
  paymentMethod     String
  paymentReference  String?
  transactionId     String?
  gatewayResponse   Json?
  processedAt       DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relationships
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

// Shopping Cart
model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relationships
  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@map("carts")
}

model CartItem {
  id               String          @id @default(cuid())
  cartId           String
  productId        String
  productVariantId String?
  quantity         Int
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  // Relationships
  cart           Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product        Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productVariant ProductVariant? @relation(fields: [productVariantId], references: [id], onDelete: SetNull)

  @@unique([cartId, productId, productVariantId])
  @@map("cart_items")
}

// Reviews and Ratings
model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      @db.SmallInt
  title     String?
  comment   String?
  verified  Boolean  @default(false)
  helpful   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

// Loyalty Program
model LoyaltyTier {
  id                 String           @id @default(cuid())
  name               String
  level              Int              @unique
  pointsThreshold    Int
  benefits           String[]
  discountPercentage Decimal          @default(0) @db.Decimal(5, 2)
  active             Boolean          @default(true)
  color              String           @default("#000000")
  icon               String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  // Relationships
  loyaltyPrograms LoyaltyProgram[]
  rewards         Reward[]

  @@map("loyalty_tiers")
}

model LoyaltyProgram {
  id             String   @id @default(cuid())
  userId         String   @unique
  tierId         String
  points         Int      @default(0)
  lifetimePoints Int      @default(0)
  referralCode   String   @unique
  referredById   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tier        LoyaltyTier @relation(fields: [tierId], references: [id])
  referredBy  User?       @relation("LoyaltyReferrals", fields: [referredById], references: [id])

  @@map("loyalty_programs")
}

model LoyaltyHistory {
  id             String             @id @default(cuid())
  userId         String
  type           LoyaltyHistoryType
  points         Int
  description    String
  orderId        String?
  redemptionId   String?
  referredUserId String?
  processed      Boolean            @default(false)
  createdAt      DateTime           @default(now())

  // Relationships
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  order      Order?      @relation(fields: [orderId], references: [id])
  redemption Redemption? @relation(fields: [redemptionId], references: [id])

  @@map("loyalty_history")
}

model Reward {
  id                    String      @id @default(cuid())
  name                  String
  description           String
  pointsCost            Int
  requiredTierId        String?
  active                Boolean     @default(true)
  startDate             DateTime?
  endDate               DateTime?
  limitPerCustomer      Int?
  limitTotal            Int?
  redemptionCount       Int         @default(0)
  redemptionExpiryDays  Int?
  image                 String?
  type                  RewardType  @default(OTHER)
  value                 Decimal?    @db.Decimal(10, 2)
  code                  String?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  // Relationships
  requiredTier LoyaltyTier? @relation(fields: [requiredTierId], references: [id])
  redemptions  Redemption[]

  @@map("rewards")
}

model Redemption {
  id          String            @id @default(cuid())
  userId      String
  rewardId    String
  code        String            @unique
  status      RedemptionStatus  @default(PENDING)
  pointsUsed  Int
  expiresAt   DateTime?
  usedAt      DateTime?
  approvedAt  DateTime?
  rejectedAt  DateTime?
  expiredAt   DateTime?
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relationships
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  reward          Reward           @relation(fields: [rewardId], references: [id], onDelete: Cascade)
  loyaltyHistory  LoyaltyHistory[]

  @@map("redemptions")
}

// Loyalty Referral System
model LoyaltyReferral {
  id             String    @id @default(cuid())
  referrerId     String
  referredUserId String?
  code           String    @unique
  isUsed         Boolean   @default(false)
  usedAt         DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relationships
  referrer  User  @relation("UserReferrals", fields: [referrerId], references: [id], onDelete: Cascade)
  referred  User? @relation("UserReferred", fields: [referredUserId], references: [id])

  @@map("loyalty_referrals")
}

model LoyaltyRedemption {
  id          String            @id @default(cuid())
  userId      String
  rewardId    String
  rewardName  String
  pointsUsed  Int
  code        String            @unique
  status      RedemptionStatus  @default(PENDING)
  expiresAt   DateTime?
  usedAt      DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("loyalty_redemptions")
}

// A/B Testing
model ABTest {
  id             String        @id @default(cuid())
  name           String        @unique
  description    String?
  type           ABTestType
  status         ABTestStatus  @default(DRAFT)
  startDate      DateTime?
  endDate        DateTime?
  primaryGoal    String
  secondaryGoals String[]
  winner         String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Target audience
  targetAudienceType String   @default("all")
  targetUserIds      String[]

  // Results (stored as JSON for flexibility)
  results Json @default("{}")

  // Relationships
  variants    ABTestVariant[]
  assignments UserTestAssignment[]

  @@map("ab_tests")
}

model ABTestVariant {
  id                String   @id @default(cuid())
  testId            String
  name              String
  description       String?
  trafficAllocation Int      @db.SmallInt
  config            Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  test        ABTest               @relation(fields: [testId], references: [id], onDelete: Cascade)
  assignments UserTestAssignment[]

  @@unique([testId, name])
  @@map("ab_test_variants")
}

model UserTestAssignment {
  id           String   @id @default(cuid())
  userId       String
  testId       String
  variantId    String
  impressions  Int      @default(0)
  conversions  Int      @default(0)
  revenue      Decimal  @default(0) @db.Decimal(10, 2)
  engagements  Int      @default(0)
  lastActivity DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  test    ABTest        @relation(fields: [testId], references: [id], onDelete: Cascade)
  variant ABTestVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([userId, testId])
  @@map("user_test_assignments")
}

// Geographic and Currency Data
model Region {
  id        String    @id @default(cuid())
  name      String
  code      String    @unique
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relationships
  countries Country[]

  @@map("regions")
}

model Country {
  id              String   @id @default(cuid())
  code            String   @unique
  name            String
  isActive        Boolean  @default(true)
  phoneCode       String
  currencyId      String
  regionId        String
  defaultLanguage String   @default("en")
  states          Json     @default("[]")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  currency Currency @relation(fields: [currencyId], references: [id])
  region   Region   @relation(fields: [regionId], references: [id])
  users    User[]
  taxRates TaxRate[]

  @@map("countries")
}

model Currency {
  id            String   @id @default(cuid())
  code          String   @unique
  name          String
  symbol        String
  rate          Decimal  @default(1) @db.Decimal(15, 8)
  isBase        Boolean  @default(false)
  isActive      Boolean  @default(true)
  decimalPlaces Int      @default(2) @db.SmallInt
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  countries Country[]

  @@map("currencies")
}

model TaxRate {
  id                String     @id @default(cuid())
  name              String
  rate              Decimal    @db.Decimal(5, 4)
  country           String
  state             String?
  postalCode        String?
  isDefault         Boolean    @default(false)
  isActive          Boolean    @default(true)
  priority          Int        @default(0)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  // Relationships
  countryRef        Country?   @relation(fields: [country], references: [code])
  productCategories Category[]

  @@map("tax_rates")
}

// Vendor Payouts
model Payout {
  id             String        @id @default(cuid())
  vendorId       String
  amount         Decimal       @db.Decimal(15, 2)
  fee            Decimal       @default(0) @db.Decimal(15, 2)
  netAmount      Decimal       @db.Decimal(15, 2)
  currency       String        @default("USD")
  status         PayoutStatus  @default(PENDING)
  paymentMethod  PaymentMethod
  paymentDetails Json
  reference      String        @unique
  description    String?
  periodStart    DateTime
  periodEnd      DateTime
  orderIds       String[]
  transactionId  String?
  processedAt    DateTime?
  notes          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relationships
  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("payouts")
}

// Authentication and Session Management
model Session {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  refreshToken String   @unique
  userAgent    String?
  ipAddress    String?
  expiresAt    DateTime
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model UserInvitation {
  id         String    @id @default(cuid())
  email      String
  role       UserRole
  invitedBy  String
  invitedUserId String?
  token      String    @unique
  expiresAt  DateTime
  acceptedAt DateTime?
  isUsed     Boolean   @default(false)
  createdAt  DateTime  @default(now())

  // Relationships
  inviter User  @relation("InvitedBy", fields: [invitedBy], references: [id], onDelete: Cascade)
  invitee User? @relation("InvitedUser", fields: [invitedUserId], references: [id])

  @@map("user_invitations")
}

// Notification System
model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String   @default("INFO")
  data      Json     @default("{}")
  isRead    Boolean  @default(false)
  readAt    DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Application Settings
model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  type      String   @default("string")
  category  String   @default("general")
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

// Indexes for performance optimization
// These are handled by Prisma automatically for foreign keys and unique constraints
// Additional indexes can be added as needed
